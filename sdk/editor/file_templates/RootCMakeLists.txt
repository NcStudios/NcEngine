if(${PROJECT_SOURCE_DIR} EQUAL ${PROJECT_BINARY_DIR})
    message(FATAL_ERROR "Don't be a fool, out-of-source build with your tool.")
endif()

if(NOT DEFINED NC_INSTALL_DIR)
    message(FATAL_ERROR "NC_INSTALL_DIR is not defined.")
endif()

if(NOT DEFINED NC_EDITOR_PROJECT_NAME)
    message(FATAL_ERROR "NC_EDITOR_PROJECT_NAME is not defined.")
endif()

cmake_minimum_required(VERSION 3.10)
project(${NC_EDITOR_PROJECT_NAME})

#Variables
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(GAME_EXE ${NC_EDITOR_PROJECT_NAME})

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(WARNING_FLAGS -Wall -Wextra -Wfatal-errors -Wno-cast-function-type)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
endif()

find_package(NcEngine REQUIRED PATHS ${NC_INSTALL_DIR})

add_executable(${GAME_EXE})

#Properties
#set_target_properties(${GAME_EXE}
#    PROPERTIES
#        RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/..
#)

#Compile Options
target_compile_options(${GAME_EXE}
    PRIVATE
        ${WARNING_FLAGS}
)

#Include Dirs
target_include_directories(${GAME_EXE}
    PRIVATE
        ${PROJECT_SOURCE_DIR}/source
        ${PROJECT_SOURCE_DIR}/scenes
)

#Link Options
target_link_libraries(${GAME_EXE}
    PRIVATE
        Nc::NcEngineLib
)

target_sources(${GAME_EXE}
    PRIVATE
        Main.cpp
)

add_subdirectory(scenes)
add_subdirectory(source)