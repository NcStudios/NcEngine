name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * 5'
  pull_request:
    branches: [ vnext ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.config'
      - '**/*.ini'
      - '**/*.fbx'
      - '**/*.nca'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'

jobs:
  Build:
    strategy:
      matrix:
        os: [windows-2022, ubuntu-24.04]
        config: [Debug, Release]
        variant: [Dev, Prod]
        include:
          - os: windows-2022
            generator: "Visual Studio 17 2022"
            shortName: Windows
            swiftshaderArtifact: "swiftshader-windows-x64"
          - os: ubuntu-24.04
            shortName: Linux
            generator: "Unix Makefiles"
            cmakeEnv: "CXX=/usr/bin/g++-14"
          - variant: Dev
            cmakeArgs: "-DNC_PROFILING_ENABLED=ON"
          - variant: Prod
            cmakeArgs: "-DNC_PROD_BUILD=ON"

    name: ${{ matrix.shortName }}-${{ matrix.variant }}-${{ matrix.config }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4

      - name: Setup MSVC
        if: ${{ matrix.shortName == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install X11
        if: ${{ matrix.shortName == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install xorg-dev

      - name: Setup Vulkan SDK
        uses: ./.github/workflows/setup-vulkan
        with:
          version: 1.3.261.1

      - name: Download SwiftShader
        if: ${{ matrix.shortName == 'Windows' && matrix.variant == 'Dev' }}
        uses: robinraju/release-downloader@v1.10
        with:
          repository: 'NcStudios/swiftshader'
          tag: 'v5.0.0-nc'
          filename: ${{ matrix.swiftshaderArtifact }}.zip
          out-file-path: 'swiftshader'
          extract: true

      - name: Configure
        run: ${{ matrix.cmakeEnv }} cmake -G "${{ matrix.generator }}" -S . -B build ${{ matrix.cmakeArgs }} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=install -DNC_BUILD_TESTS=ON

      - name: Build and Install
        run: cmake --build build --target install --config ${{ matrix.config }}

      - name: Run Tests
        working-directory: ${{github.workspace}}/build/test
        run: ctest -V --output-on-failure --output-junit TestResults.xml

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shortName }}-${{ matrix.variant }}-${{ matrix.config }}-TestResults
          path: build/test/TestResults.xml

      - name: Run Smoke Test
        if: ${{ matrix.shortName == 'Windows' && matrix.variant == 'Dev' }}
        shell: bash
        run: script/run_smoke_test.sh "${{ github.workspace }}/swiftshader/${{ matrix.swiftshaderArtifact }}" "${{ github.workspace }}/install" "SmokeTestResults.txt"

      - name: Upload Smoke Test Results
        if: ${{ matrix.shortName == 'Windows' && matrix.variant == 'Dev' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shortName }}-${{ matrix.variant }}-${{ matrix.config }}-SmokeTestResults
          path: |
            install/sample/SmokeTestResults.txt
            install/sample/Sample.log

  Publish-Test-Results:
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      checks: write
      pull-requests: write
    if: always()

    steps:
    - name: Download Results
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Publish Results
      uses: mikepenz/action-junit-report@v4
      if: always()
      with:
        report_paths: 'artifacts/**/*.xml'
